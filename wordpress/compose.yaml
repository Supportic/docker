volumes:
  db_data:
  wordpress_data:
networks:
  default:
    name: backend
    external: false

services:
  ########################
  # Wordpress & Web Server
  ########################
  wordpress:
    build: 
      context: ./.docker/service/wordpress
      args:
        - WP_VER=${WP_VER:-latest}
        - UID=${UID}
        - GID=${GID}
        - UNAME=${UNAME}
        - GNAME=${GNAME}
        - PASS=${PASS}
      target: develop
    image: ${PROJECT_NAME}/wordpress:0.0.1
    container_name: ${PROJECT_NAME}-wordpress
    working_dir: /var/www/html
    hostname: localhost
    platform: linux/amd64
    ports:
      - ${WORDPRESS_PORT_HOST:-80}:80
    restart: unless-stopped
    init: true
    user: ${UID:-1000}
    volumes:
      - wordpress_data:/var/www/html
      - ./.docker/service/wordpress/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./.docker/service/wordpress/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
      # - ./.docker/service/wordpress/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./wordpress/themes:/var/www/html/wp-content/themes
      - ./wordpress/plugins:/var/www/html/wp-content/plugins
    env_file:
      - .db.env
      - .wordpress.env
    environment:
      WORDPRESS_CONFIG_EXTRA: |
        define( 'WP_ENVIRONMENT_TYPE', getenv_docker('WORDPRESS_WP_ENVIRONMENT_TYPE', 'production') );
        define( 'CORE_UPGRADE_SKIP_NEW_BUNDLED', getenv_docker('WORDPRESS_CORE_UPGRADE_SKIP_NEW_BUNDLED', false) );
        define( 'WP_MEMORY_LIMIT', getenv_docker('WORDPRESS_MEMORY_LIMIT', '512M') );
        define( 'WP_DEBUG_LOG', getenv_docker('WORDPRESS_WP_DEBUG_LOG', false) );
        define( 'SCRIPT_DEBUG', getenv_docker('WORDPRESS_SCRIPT_DEBUG', false) );
        define( 'SAVEQUERIES', getenv_docker('WORDPRESS_SAVEQUERIES', false) );
        define( 'WP_DEBUG_DISPLAY', getenv_docker('WORDPRESS_WP_DEBUG_DISPLAY', false) );
        ini_set('display_errors', getenv_docker('WORDPRESS_DISPLAY_ERRORS', false));
    depends_on:
      - db

  ########################
  # Wordpress CLI
  ########################
  wpcli:
    build: 
      context: ./.docker/service/wpcli
      args:
        - WPCLI_VER=${WPCLI_VER:-cli}
        - UID=${UID}
        - GID=${GID}
        - UNAME=${UNAME}
        - GNAME=${GNAME}
        - PASS=${PASS}
    image:  ${PROJECT_NAME}/wpcli:0.0.1
    platform: linux/amd64
    init: true
    user: ${UID:-1000}
    container_name: ${PROJECT_NAME}-wpcli
    working_dir: /var/www/html
    env_file:
      - .db.env
    depends_on:
      # wait until DB is ready
      db:
        condition: service_healthy
    volumes:
      - wordpress_data:/var/www/html
      - ./wordpress/themes:/var/www/html/wp-content/themes
      - ./wordpress/plugins:/var/www/html/wp-content/plugins

  ########################
  # Database
  ########################
  db:
    image: mariadb:${DB_VER:-10.10-jammy}
    platform: linux/amd64
    restart: unless-stopped
    container_name: ${PROJECT_NAME}-db
    env_file:
      - .db.env
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD --silent
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - db_data:/var/lib/mysql
      - ./.docker/service/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    expose:
      - 3306

  ########################
  # Database UI
  ########################
  adminer:
    image: adminer:${ADMINER_VER:-4.8.1-standalone}
    platform: linux/amd64
    restart: unless-stopped
    container_name: ${PROJECT_NAME}-adminer
    env_file:
      - .adminer.env
    ports:
      - ${ADMINER_PORT_HOST:-8080}:8080
